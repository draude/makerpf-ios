//*************************************************************//	File: PFFastDrag.js //	PFFastDrag: game fastDrag//*************************************************************function PFFastDrag(){		//=====================================================	// VARIABLES	//=====================================================	var items;	var itemsPare;	var newXML;	var fastListen;	var images;	var imagesDrag;	var disponibles;	var fiJoc 	= false;	var sortir	= false;		var containerPrincipal;	var containerNou;	var total;	var preload;	var num		= 0;	var offsetx, offsety;	var newx, newy;	var i, j;	var firstI 	= 0;	this.load 	= load;	this.show 	= show;		var baseGame;		//=======================================================================				// LOAD	//=======================================================================	function load(game,folder){		newXML = new PFXMLDragContainers();		newXML.load(game,folder);				items 		= new Array(newXML.items.length);		itemsPare 	= new Array(newXML.itemsPare.length);		fastListen 	= new PFFastDragListen();		PFSound.load('end','game/sounds/ok.mp3');		PFSound.load('tick','game/sounds/boto.mp3');		total = items.length - newXML.itemsDiscard;	}		//=======================================================================				// SHOW GAME : It is a create, not a show	//=======================================================================	function show(game,folder,direction,containerAux,containerAnt){			baseGame = new PFBaseGame();		baseGame.create(this,game,folder,containerAux, containerAnt);	}		//=====================================================	// BUILD PRELOAD MANIFEST	//=====================================================	this.buildPreloadManifest = buildPreloadManifest	function buildPreloadManifest(itemsManifest,game){						for ( i=0; i<itemsPare.length; i++){			if(newXML.itemsPare[i].getSrc().charAt( newXML.itemsPare[i].getSrc().length-1 ) != "/"){				itemsManifest.push(newXML.itemsPare[i].getSrc());			}		}				return itemsManifest;	}			//=====================================================	// ON ADD MENU	//=====================================================	this.onAddMenu = onAddMenu;	function onAddMenu(){	}		//=======================================================================	// ON SHOW GAME	//=======================================================================	this.onShowGame = onShowGame;	function onShowGame(){				//var background = new Bitmap(newXML.background.getSrc());		//baseGame.containerBase.addChild(background);				images=new Array(itemsPare.length);		for (i = 0; i < itemsPare.length; i++){			if(newXML.itemsPare[i].getKind() == 1){				images[i] 			= new Image();				images[i].src 		= newXML.itemsPare[i].getSrc();							images[i].i 		= i;				images[i].onload 	= loadPare;			}else{				loadPareText(i);			}		}	}		//=======================================================================	// ON START GAME	//=======================================================================	this.onStartGame = onStartGame;	function onStartGame(){		loadChild(baseGame.getGame(),baseGame.getFolder());	}			//=====================================================	// loadImatgeDrag: load child items images 	//=====================================================	function loadChild(game,folder){				imagesDrag	= new Array(items.length);		disponibles	= new Array(items.length);				for (i = 0; i < items.length; i++){			imagesDrag[i] 		= new Image();			imagesDrag[i].src 	= newXML.items[i].getSrc();			imagesDrag[i].kind	= newXML.items[i].getKind();			disponibles[i] 		= i;		}				var imatgeAleatoria 				= Math.floor((items.length)*Math.random());		if(imagesDrag[imatgeAleatoria].kind == 1){			imagesDrag[imatgeAleatoria].onload 	= function(){loadImatgeDrag(imatgeAleatoria,game,folder);};		}else{			loadTextDrag(imatgeAleatoria,game,folder);		}	}	//=====================================================	// loadTextDrag: load and show all child items images 	//=====================================================	function loadTextDrag(i,game,folder){		var bm = new PFBaseItem(newXML.items[i],i);		items[i] = bm.getText();					if (newXML.items[i].getScale()!=1000){			var scaleFactor = newXML.items[i].getScale()/1000;			items[i].scaleX = scaleFactor;			items[i].scaleY = scaleFactor;		}				items[i].defaultScaleX = items[i].scaleX;		items[i].defaultScaleY = items[i].scaleY;				newx			= parseInt(newXML.items[i].getX());		newy			= parseInt(newXML.items[i].getY());			items[i].x 		= Math.floor((1024)*Math.random());		items[i].y 		= Math.floor((384)*Math.random() - 384);				items[i].rotation	=  newXML.items[i].getRotation();				baseGame.containerBase.addChild(items[i]);		Tween.get(items[i]).to({x:newx},300).play(Tween.get(items[i]).to({y:newy},300));					(function(target) {			target.onPress = function(evt) {				if(baseGame.isGameActive()){					if(fastListen.getItem() != i){						baseGame.containerBase.removeChild(items[i]);						baseGame.containerBase.addChild(items[i]);						PFSound.play('tick');						fastListen.getPosition(target);						var offset 		= {x:target.x-evt.stageX, y:target.y-evt.stageY};						evt.onMouseMove = function(ev) {							fastListen.onMouseMove(ev,target,offset);						}						evt.onMouseUp = function(ev){							fastListen.onMouseUp(target,i,newXML.items[i].getParent(),newXML.itemsPare,items);							fiJoc=fastListen.getFinal(total);							if(fastListen.getCorrect()){								total--;								var aftertotal = total;								Tween.get(containerPrincipal).wait(800).call(function(){checkChange(target,i,game,folder,aftertotal)});							}						}					}				}			}		})(items[i]);		if(disponibles.length>1){						Tween.get(containerPrincipal).wait(2000).call(function(){loadNext(i);});					}	}	//=====================================================	// loadImatgeDrag: load and show all child items images 	//=====================================================	function loadImatgeDrag(i,game,folder){		items[i] = new Bitmap(imagesDrag[i]);		if (newXML.items[i].getScale()!=1000){			var scaleFactor = newXML.items[i].getScale()/1000;			items[i].scaleX = scaleFactor;			items[i].scaleY = scaleFactor;		}				items[i].defaultScaleX = items[i].scaleX;		items[i].defaultScaleY = items[i].scaleY;				offsetx			= (parseInt(items[i].image.width)/2);		offsety			= (parseInt(items[i].image.height)/2);		newx			= parseInt(newXML.items[i].getX());		newy			= parseInt(newXML.items[i].getY());		items[i].regX	= offsetx;		items[i].regY	= offsety;		items[i].x 		= Math.floor((1024)*Math.random());		items[i].y 		= Math.floor((384)*Math.random() - 384);				items[i].rotation	=  newXML.items[i].getRotation();				baseGame.containerBase.addChild(items[i]);		Tween.get(items[i]).to({x:newx},300).play(Tween.get(items[i]).to({y:newy},300));					(function(target) {			target.onPress = function(evt) {				if(baseGame.isGameActive()){					if(fastListen.getItem() != i){						baseGame.containerBase.removeChild(items[i]);						baseGame.containerBase.addChild(items[i]);						PFSound.play('tick');						fastListen.getPosition(target);						var offset 		= {x:target.x-evt.stageX, y:target.y-evt.stageY};						evt.onMouseMove = function(ev) {							fastListen.onMouseMove(ev,target,offset);						}						evt.onMouseUp = function(ev){							fastListen.onMouseUp(target,i,newXML.items[i].getParent(),newXML.itemsPare,items);							fiJoc=fastListen.getFinal(total);							if(fastListen.getCorrect()){								total--;								var aftertotal = total;								Tween.get(containerPrincipal).wait(800).call(function(){checkChange(target,i,game,folder,aftertotal)});							}						}					}				}			}		})(items[i]);		if(disponibles.length>1){						Tween.get(containerPrincipal).wait(2000).call(function(){loadNext(i);});					}	}	//=====================================================	// loadNext: load next child bitmap after some time	//=====================================================	function loadNext(i){		var game 	= baseGame.getGame();		var folder 	= baseGame.getFolder();		for(j = 0; j < disponibles.length; j++){			if(disponibles[j] == i){				var posEliminar = j;			}		}		disponibles.splice(posEliminar,1);		var imatgeAleatoria = Math.floor((disponibles.length)*Math.random());        //console.log(imagesDrag[disponibles[imatgeAleatoria]]);        if (imagesDrag[disponibles[imatgeAleatoria]].kind == 1)		    loadImatgeDrag(disponibles[imatgeAleatoria],game,folder);        else            loadTextDrag(disponibles[imatgeAleatoria],game,folder);	}	//=====================================================	// checkChange: remove correct bitmap and check end	//=====================================================	function checkChange(target,pos,game,folder,aftertotal){		if(sortir==false){			for(i = 0; i < itemsPare.length; i++){				if(newXML.itemsPare[i].getX() == target.x && newXML.itemsPare[i].getY()==target.y){					baseGame.containerBase.removeChild(items[pos]);					if(aftertotal == 0){						baseGame.endGame(newXML.endGame);					}				}			}		}	}	//=====================================================	// loadPareText: load and show all parent items images 	//=====================================================	function loadPareText(evt){				var game 	= baseGame.getGame();		var folder 	= baseGame.getFolder();		i = evt;				var bm = new PFBaseItem(newXML.itemsPare[i],i);		itemsPare[i] = bm.getText();						if (newXML.itemsPare[i].getScale() != 1000){			var scaleFactor 	= newXML.itemsPare[i].getScale()/1000;			itemsPare[i].scaleX	= scaleFactor;			itemsPare[i].scaleY	= scaleFactor;				}				itemsPare[i].defaultScaleX = itemsPare[i].scaleX;		itemsPare[i].defaultScaleY = itemsPare[i].scaleX;					newx				= parseInt(newXML.itemsPare[i].getX());		newy				= parseInt(newXML.itemsPare[i].getY());			itemsPare[i].x		= newx;		itemsPare[i].y		= newy;				itemsPare[i].rotation	=  newXML.itemsPare[i].getRotation();				baseGame.containerBase.addChild(itemsPare[i]);		}	//=====================================================	// loadPare: load and show all parent items images 	//=====================================================	function loadPare(evt){		i = evt.target.i;				var game 	= baseGame.getGame();		var folder 	= baseGame.getFolder();		i = evt.target.i;				itemsPare[i] 			= new Bitmap(images[i]);		if (newXML.itemsPare[i].getScale() != 1000){			var scaleFactor 	= newXML.itemsPare[i].getScale()/1000;			itemsPare[i].scaleX	= scaleFactor;			itemsPare[i].scaleY	= scaleFactor;				}				itemsPare[i].defaultScaleX = itemsPare[i].scaleX;		itemsPare[i].defaultScaleY = itemsPare[i].scaleX;					offsetx=(parseInt(itemsPare[i].image.width)/2);		offsety			 	= (parseInt(itemsPare[i].image.height)/2);		newx				= parseInt(newXML.itemsPare[i].getX());		newy				= parseInt(newXML.itemsPare[i].getY());		itemsPare[i].regX	= offsetx;		itemsPare[i].regY	= offsety;		itemsPare[i].x		= newx;		itemsPare[i].y		= newy;				itemsPare[i].rotation	=  newXML.itemsPare[i].getRotation();				baseGame.containerBase.addChild(itemsPare[i]);		}	//=====================================================	// cleanGame: delete all game showed	//=====================================================	function cleanGame(){        clearSounds();		containerPrincipal.removeAllChildren();		containerNou.removeAllChildren();		stage.removeChild(containerPrincipal);		stage.removeChild(containerNou);	}    		//=====================================================	// CLEAR SOUNDS	//=====================================================			this.onClearSounds = onClearSounds;    function onClearSounds(){		PFSound.unload('tick');        PFSound.unload('end');    }}