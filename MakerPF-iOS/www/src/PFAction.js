//*****************************************************/// PFAction: Load all xmls to variables//*****************************************************/function PFAction(){		//Variables	var jumps;	var movementX;	var movementY;	var CardPositions;	var redCard;	var endGameScreen;	var endGameSound;	var numPages;	var backgroundPuzzle;	var actionState;	var actionMove;	var actionJump;	var actionRotation;	var actionScale;	var actionSound;	var itemsMenu;	var itemsExplore;	var itemsMemory;	var itemsDrag;	var itemsListenDrag;	var itemsPuzzle;	var itemsFindMe;	var itemsFletxes;	var numLostItems;	var numRelations;	var itemsTouchListen;	var foregroundPaint;	var itemsPare;	var itemsFast;	var itemsInteractiveImages;	var itemsQuiz;	var itemsQuizGaps;	var itemsDifferences;	var backgroundPortada;	var backgroundGame;	var backgroundMenu;	var playPortada;	var xmlhttp;	var xmlIni;	var xmlDoc;	var i, j, n;	var level;	var portadaActive;	var menuActive;	var musicSrc;	var menuMusic;		//Function declarations	this.LoadItems = LoadItems;	//this.LoadActions = LoadActions;	this.creditsPortada;	this.ReadPortada = ReadPortada;	this.ReadMenu = ReadMenu;	this.ReadOptions = ReadOptions;	this.getBackground = getBackground;	this.getCredits = getCredits;	this.getPlay = getPlay;	this.getItemsMenu = getItemsMenu;	this.getItems = getItems;	this.getAction = getAction;	this.getBackgroundPuzzle = getBackgroundPuzzle;	this.getEndGameScreen = getEndGameScreen;	this.getEndGameSound = getEndGameSound;	this.getRedCard = getRedCard;	this.getCardPositions = getCardPositions;	this.setMovementX = setMovementX;	this.setMovementY = setMovementY;	this.getMovementX = getMovementX;	this.getMovementY = getMovementY;	this.setJumps = setJumps;	this.getJumps = getJumps;	this.getActionMove = getActionMove;	this.getActionScale = getActionScale;	this.getActionRotation = getActionRotation;	this.getActionJump = getActionJump;	this.getNumLostItems = getNumLostItems;	this.getNumRelations = getNumRelations;	this.getItemsPare = getItemsPare;	this.getLevel = getLevel;	this.getPortadaActive = getPortadaActive;	this.getMenuActive	= getMenuActive;	this.getMusicSrc	= getMusicSrc;	this.getMenuMusic	= getMenuMusic;				//Functions	function getNumLostItems()	{ return this.numLostItems;		}	function getNumRelations()	{ return numRelations;			}	function setJumps(value)	{ this.jumps = value;			}	function getJumps()			{ return this.jumps;			}	function setMovementX(value){ this.movementX=value;			}	function setMovementY(value){ this.movementY=value;			}	function getMovementX()		{ return this.movementX;		}	function getMovementY()		{ return this.movementY;		}	function getRedCard()		{ return this.redCard;			}	function getCardPositions()	{ return this.CardPositions;	}	function getEndGameScreen() { return this.endGameScreen;	}	function getEndGameSound()	{ return this.endGameSound;		}	function getAction()		{		if (actionState){			if(this.actionMove.length>0){				return this.actionMove;			}			if(this.actionScale.length>0){				return this.actionScale;			}			if(this.actionRotation.length>0){				return this.actionRotation;			}			if(this.actionJump.length>0){				return this.actionJump;			}			if(this.actionSound != ""){						}		}	}	function getActionMove()	{ return this.actionMove;		}	function getActionScale()	{ return this.actionScale;		}	function getActionRotation(){ return this.actionRotation;	}	function getActionJump()	{ return this.actionJump;		}	function getItemsMenu()		{ return this.itemsMenu;		}	function getItemsPare()		{ return this.itemsPare;		}	function getLevel()			{ return this.level;			}	function getPortadaActive()	{ return portadaActive;			}	function getMenuActive()	{ return menuActive;			}	function getMusicSrc()		{ return musicSrc;				}	function getMenuMusic()		{ return menuMusic;				}	function getItems(value){		if(value=="explore"){			return this.itemsExplore;		}		if(value=="drag"){			return this.itemsDrag;		}		if(value=="memory"){			return this.itemsMemory;		}		if(value=="puzzle"){			return this.itemsPuzzle;		}		if(value=="findme"){			return this.itemsFindMe;		}		if(value=="listenandtouch"){			return this.itemsTouchListen;		}		if(value=="listenanddrag"){			return this.itemsListenDrag;		}		if(value=="fastdrag" || value=="dragtocontainers"){			return this.itemsFast;		}		if(value=="differences"){			return this.itemsDifferences;		}		if(value=="paint"){			return this.foregroundPaint;		}		if(value=="interactiveimages"){			return this.itemsInteractiveImages;		}		if(value=="quiz"){			return this.itemsQuiz;		}		if(value=="quiztext"){			return this.itemsQuizGaps;		}		if(value=="arrows" || value=="arrowsvalidate"){			return this.itemsFletxes;		}	}	function getBackground(value){		if( value == "Portada" ){			return this.backgroundPortada;		}else{			if( value == "Menu" ){				return this.backgroundMenu;			}else{				return this.backgroundGame;			}		}	}	function getBackgroundPuzzle()	{	return this.backgroundPuzzle;	}	function getCredits()			{	return this.creditsPortada;		}	function getPlay()				{	return this.playPortada;		}		//=======================================================================				// READ PORTADA	//=======================================================================			function ReadPortada( action ){		if  ( window.XMLHttpRequest ){			xmlhttp = new XMLHttpRequest();		}else{			xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");		}		xmlhttp.open("GET",action,false);		xmlhttp.send();		xmlDoc = xmlhttp.responseXML; 		var x = xmlDoc.getElementsByTagName("background");		this.backgroundPortada = new Background(x[0].attributes.getNamedItem('src').nodeValue,0,0,"");		x = xmlDoc.getElementsByTagName("play");		this.playPortada = new PFItem(x[0].attributes.getNamedItem('src').nodeValue,x[0].attributes.getNamedItem('x').nodeValue,x[0].attributes.getNamedItem('y').nodeValue,x[0].attributes.getNamedItem('scale').nodeValue,x[0].attributes.getNamedItem('rotation').nodeValue,"");	}		//=======================================================================				// READ OPTION	//=======================================================================		function ReadOptions( action ){		if  (window.XMLHttpRequest){			xmlhttp = new XMLHttpRequest();		}else{			xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");		}		xmlhttp.open("GET",action,false);		xmlhttp.send();		xmlDoc 				= xmlhttp.responseXML;		var tagLanguages 	= xmlDoc.getElementsByTagName("languages");		var tagLang 		= tagLanguages[0].getElementsByTagName("language");		if(lang == null)			lang 				= tagLang[0].attributes.getNamedItem("id").nodeValue;		langList 			= new Array();				for(i=0; i<tagLang.length; i++){			tagLang = xmlDoc.getElementsByTagName("language");			langList[i] = new PFItemLanguage (tagLang[i].attributes.getNamedItem("id").nodeValue, tagLang[i].attributes.getNamedItem("lang").nodeValue);		}					if(typeof(xmlDoc.getElementsByTagName("cover")[0]) != "undefined"){			portadaActive	=	xmlDoc.getElementsByTagName("cover")[0].attributes.getNamedItem("active").nodeValue;		}		if(typeof(xmlDoc.getElementsByTagName("menu")[0]) != "undefined"){			menuActive 		=	xmlDoc.getElementsByTagName("menu")[0].attributes.getNamedItem("active").nodeValue;		}		musicSrc 	= "";		menuMusic 	= "";		if(typeof(xmlDoc.getElementsByTagName("music")[0]) != "undefined"){			musicSrc		=	xmlDoc.getElementsByTagName("music")[0].attributes.getNamedItem("src").nodeValue;			menuMusic		= 	xmlDoc.getElementsByTagName("music")[0].attributes.getNamedItem("menu_music").nodeValue;		}	}		//=======================================================================				// READ MENU	//=======================================================================			function ReadMenu( action ){		if  (window.XMLHttpRequest){			xmlhttp = new XMLHttpRequest();		}else{			xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");		}		xmlhttp.open("GET",action,false);		xmlhttp.send();		xmlDoc = xmlhttp.responseXML;		var x = xmlDoc.getElementsByTagName("background");		this.backgroundMenu = new Background(x[0].attributes.getNamedItem('src').nodeValue,0,0,"");		x = xmlDoc.getElementsByTagName("menuItem");		this.itemsMenu = new Array(x.length);		for  (i = 0; i < x.length; i++){			PFItemMenu.prototype = new PFItem(x[i].attributes.getNamedItem("src").nodeValue,x[i].attributes.getNamedItem("x").nodeValue,x[i].attributes.getNamedItem("y").nodeValue,x[i].attributes.getNamedItem("scale").nodeValue,x[i].attributes.getNamedItem("rotation").nodeValue,"");			this.itemsMenu[i] = new PFItemMenu(x[i].attributes.getNamedItem("id").nodeValue,x[i].attributes.getNamedItem("game").nodeValue,x[i].attributes.getNamedItem("type").nodeValue);		}		typeNavigation = xmlDoc.getElementsByTagName("mode")[0].attributes.getNamedItem("id").nodeValue;	}		//=======================================================================				// SELECT SOUND XML	//=======================================================================			function SelectSoundXML(tagSnd){		//Select which sound is related with language		var j=0;		if(tagSnd[j].attributes.getNamedItem("lang").nodeValue==lang){				return j;			}		while(tagSnd[j].attributes.getNamedItem("lang").nodeValue!=lang){			if(tagSnd[j].attributes.getNamedItem("lang").nodeValue==lang){				return j;			}			j++;			if(j >= tagSnd.length){				break;			}			if(tagSnd[j].attributes.getNamedItem("lang").nodeValue==lang){				return j;			}					}		return -1;	}		//=======================================================================				// SELECT TEXT XML	//=======================================================================			function SelectTextXML(tagText){		//Select which text is related with language		var j=0;		if(tagText[j].attributes.getNamedItem("lang").nodeValue==lang){			return j;		}		while(tagText[j].attributes.getNamedItem("lang").nodeValue!=lang){			if(tagText[j].attributes.getNamedItem("lang").nodeValue==lang){				return j;			}			j++;			if(j >= tagText.length){				break;			}			if(tagText[j].attributes.getNamedItem("lang").nodeValue==lang){				return j;			}					}				return -1;		}		//=======================================================================				// LoadItems: load the items of the chosen game	//=======================================================================	function LoadItems( game, folder ){		if ( window.XMLHttpRequest ) { xmlhttp = new XMLHttpRequest(); } else { xmlhttp = new ActiveXObject("Microsoft.XMLHTTP"); }				xmlhttp.open("GET","game/"+folder+"/game.xml",false);		xmlhttp.send();		xmlIni = xmlhttp.responseXML;		xmlDoc 	= xmlIni.getElementsByTagName("page")[0];		var x 	= xmlDoc.getElementsByTagName("background");		if(typeof(x[0]) != "undefined"){			this.backgroundGame = new Background(x[0].attributes.getNamedItem('src').nodeValue,0,0,folder);		}		x = xmlDoc.getElementsByTagName("item");		var x2;		var tagSound;				//if(game=="explore")		{ JA HI HA EL NOU }		//if(game=="memory") 		{ JA HI HA EL NOU }		//if(game=="quiz")	 		{ JA HI HA EL NOU } 				//if(game=="listenTouch") 	{ JA HI HA EL NOU }				//if(game=="puzzle") 		{ JA HI HA EL NOU }					//if(game=="drag") 			{ JA HI HA EL NOU }					//if(game=="findme") 		{ JA HI HA EL NOU }						//if(game=="listenanddrag")	{ JA HI HA EL NOU }					//if(game=="fastdrag")		{ JA HI HA EL NOU }														//if(game=="dragcontainers"){ JA HI HA EL NOU }							//if(game=="paint")			{ JA HI HA EL NOU }									//if(game=="differences")	{ JA HI HA EL NOU }						//if(game=="interactiveimages")			{ JA HI HA EL NOU }				//if(game=="quiztext")		{ JA HI HA EL NOU }				//if(game=="arrows")		{ JA HI HA EL NOU }	}}