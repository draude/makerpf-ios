//*************************************************************//	File: PFGameDifferences.js //	PFGameDifferences: game Differences//*************************************************************function PFGameDifferences(){	//======================================================================				// VARIABLES	//======================================================================	var items1;	var items2;	var fons;	var xml;	var differencesListen;	var images1;	var images2;	var imgBackground;	var availables;	var dif;	var totals	= 0;	var endGame	= false;		var offsetx, offsety;	var newx, newy;	var i;	var newXML;	var differencesOrientation;		this.load = load;	this.show = show;		var baseGame;		//======================================================================				// LOAD	//======================================================================	function load(game,folder){		newXML 	= new PFXMLDifferences;		newXML.load(game,folder);						xml 				= new PFAction();		xml.LoadItems(game,folder);		items1 				= new Array(newXML.items.length-3);		items2 				= new Array(newXML.items.length-3);		fons 				= new Array(2);		imgBackground 		= new Array(2);		differencesListen 	= new PFGameDifferencesListen();		PFSound.load('tick','game/sounds/boto.mp3');	}		//=======================================================================				// SHOW GAME : It is a create, not a show	//=======================================================================	function show(game,folder,direction,containerAux,containerAnt){			baseGame = new PFBaseGame();		baseGame.hasBackground(false);		baseGame.create(this,game,folder,containerAux, containerAnt);	}			//=====================================================	// BUILD PRELOAD MANIFEST	//=====================================================	this.buildPreloadManifest = buildPreloadManifest	function buildPreloadManifest(itemsManifest,game){				//itemsManifest.push(newXML.background.getSrc());		itemsManifest.push(newXML.items[1].getSrc());		itemsManifest.push(newXML.items[2].getSrc());						for (i = 0; i < items1.length; i++){			itemsManifest.push(newXML.items[i+3].getSrc());					}					return itemsManifest;	}			//=====================================================	// ON ADD MENU	//=====================================================	this.onAddMenu = onAddMenu;	function onAddMenu(){	}	//=======================================================================	// ON SHOW GAME	//=======================================================================	this.onShowGame = onShowGame;	function onShowGame(){		//var background = new Bitmap(xml.getBackground("game").getSrc());		//baseGame.containerBase.addChild(background);		imgBackground[0] = new Image();        imgBackground[0].onload = aaLoadImatgeFons;        imgBackground[0].src = newXML.items[1].getSrc();        imgBackground[0].i = 0;		imgBackground[1] = new Image();        imgBackground[1].onload = aaLoadImatgeFons;        imgBackground[1].src = newXML.items[2].getSrc();        imgBackground[1].i = 1;	}    function aaLoadImatgeFons(evt){        loadImatgesFons(evt.target.i,baseGame.getGame(),baseGame.getFolder(),newXML.orientation,evt.target.i,newXML.items[evt.target.i+1].getScaleType(),newXML.items[evt.target.i+1].getRgb());    }		//=======================================================================	// ON START GAME	//=======================================================================	this.onStartGame = onStartGame;	function onStartGame(){			}	//=======================================================================				// segueixCarrega: keeps loading bitmaps in the right order	//=======================================================================	function segueixCarrega(folder,desX,desY){				images1		= new Array(items1.length);		images2		= new Array(items2.length);		availables	= new Array(items1.length);						differencesOrientation = newXML.orientation;				for (i = 0; i < items1.length; i++){			images1[i] = new Image();			images1[i].src = newXML.items[i+3].getSrc();			images1[i].i			= i;			images1[i].num			= 1;			images1[i].orientation	= newXML.orientation;						images1[i].factor		= 0;						images1[i].desX			= desX;						images1[i].desY			= desY;						images1[i].onload		= loadImatge;									images2[i] = new Image();			images2[i].src = newXML.items[i+3].getSrc();			images2[i].i			= i;			images2[i].num			= 2;			images2[i].orientation	= newXML.orientation;						images2[i].factor		= 1;						images2[i].desX			= desX;						images2[i].desY			= desY;						images2[i].onload		= loadImatge;											availables[i] = i;		}	}	//=======================================================================    // loadImatgesFons: loads the two differences images	//=======================================================================    function loadImatgesFons(i,game,folder,orientation,factor,scaleType,rgb){		fons[i] = new Bitmap(newXML.items[i+1].getSrc());        //fons[i].onLoad = function() {            loadFons(i,game,folder,orientation,factor,scaleType,rgb);        //}    }    function loadFons(i,game,folder,orientation,factor,scaleType,rgb) {        var rgb = rgb.split("-");        if(orientation == "horizontal"){            var g = new Graphics();            g.beginFill(Graphics.getRGB(rgb[0],rgb[1],rgb[2]));            g.drawRect(0,0,1024,384);            if(i == 0){                var s = new Shape(g);                s.x = 0;                s.y = 0;                baseGame.containerBase.addChild(s);            }else{                var s = new Shape(g);                s.x = 0;                s.y = 384;                baseGame.containerBase.addChild(s);            }            baseGame.containerBase.addChild(fons[i]);            fons[i].x 	= 0;            fons[i].y 	= 384 * factor;            switch(scaleType){                case "scalefitwidth":                    var currentWidth 	= parseInt(fons[i].image.width);                    var newScaleX		= 1024/currentWidth;                    fons[i].scaleX 	= newScaleX;                    fons[i].scaleY 	= newScaleX;                    fons[i].regY		= 0.5;                    if(i == 0)                        fons[i].y 		= 192 - (fons[i].image.height*newScaleX)/2;                    if(i == 1)                        fons[i].y 		= 576 - (fons[i].image.height*newScaleX)/2;                    break;                case "scalefitheight":                    var currentHeight 	= parseInt(fons[i].image.height);                    var newScaleY		= 384/currentHeight;                    fons[i].scaleY 		= newScaleY;                    fons[i].scaleX 		= newScaleY;                    fons[i].regX		= 0.5;                    fons[i].x 			= 512 - (fons[i].image.width*newScaleY)/2;                    break;                case "scalefit":                    var currentWidth 	= parseInt(fons[i].image.width);                    var newScaleX		= 1024/currentWidth;                    var currentHeight 	= parseInt(fons[i].image.height);                    var newScaleY		= 384/currentHeight;                    var currScale = 1;                    if(newScaleX > newScaleY){                        currScale = newScaleY;                    }else{                        currScale = newScaleX;                    }                    fons[i].scaleX = currScale;                    fons[i].scaleY = currScale;                    fons[i].regX	= 0.5;                    fons[i].x 		= 512 - (fons[i].image.width*currScale)/2;                    fons[i].regY	= 0.5;                    if(i == 0)                        fons[i].y 		= 192 - (fons[i].image.height*currScale)/2;                    if(i == 1)                        fons[i].y 		= 576 - (fons[i].image.height*currScale)/2;                    break;                case "scalefill":                    var currentWidth 	= parseInt(fons[i].image.width);                    var newScaleX		= 1024/currentWidth;                    fons[i].scaleX	= newScaleX;                    var currentHeight 	= parseInt(fons[i].image.height);                    var newScaleY		= 384/currentHeight;                    fons[i].scaleY = newScaleY;                    break;                case "noscale":                    //fons[i].regX	= 0.5;                    fons[i].x 		= 0;// - (fons[i].image.width)/2;                    //fons[i].regY	= 0.5;                    if(i == 0)                        fons[i].y 		= 0;// - (fons[i].image.height)/2;                    if(i == 1)                        fons[i].y 		= 384;// - (fons[i].image.height)/2;                    break;            }        }        if(orientation == "vertical"){            var g = new Graphics();            g.beginFill(Graphics.getRGB(rgb[0],rgb[1],rgb[2]));            g.drawRect(0,0,512,768);            if(i == 0){                var s = new Shape(g);                s.x = 0;                s.y = 0;                baseGame.containerBase.addChild(s);            }else{                var ss = new Shape(g);                ss.x = 512;                ss.y = 0;                baseGame.containerBase.addChild(ss);            }            baseGame.containerBase.addChild(fons[i]);            fons[i].x 	= 512 * factor;            fons[i].y 	= 0;            switch(scaleType){                case "scalefitwidth":                    var currentWidth 	= parseInt(fons[i].image.width);                    var newScaleX		= 512/currentWidth;                    fons[i].scaleX 	= newScaleX;                    fons[i].regY		= 0.5;                    fons[i].y 			= 384 - (fons[i].image.height*newScaleX)/2;                    break;                case "scalefitheight":                    var currentHeight 	= parseInt(fons[i].image.height);                    var newScaleY		= 768/currentHeight;                    fons[i].scaleY 		= newScaleY;                    fons[i].regX		= 0.5;                    if(i == 0)                        fons[i].x 			= 256 - (fons[i].image.width*newScaleY)/2;                    if(i == 1)                        fons[i].x 			= 768 - (fons[i].image.width*newScaleY)/2;                    break;                case "scalefit":                    var currentWidth 	= parseInt(fons[i].image.width);                    var newScaleX		= 512/currentWidth;                    var currentHeight 	= parseInt(fons[i].image.height);                    var newScaleY		= 768/currentHeight;                    var currScale = 1;                    if(newScaleX > newScaleY){                        currScale = newScaleY;                    }else{                        currScale = newScaleX;                    }                    fons[i].scaleX = currScale;                    fons[i].scaleY = currScale;                    fons[i].regX	= 0.5;                    if(i == 0)                        fons[i].x 		= 256 - (fons[i].image.width*currScale)/2;                    if(i == 1)                        fons[i].x 		= 768 - (fons[i].image.width*currScale)/2;                    fons[i].regY	= 0.5;                    fons[i].y 		= 384 - (fons[i].image.height*currScale)/2;                    break;                case "scalefill":                    var currentWidth 	= parseInt(fons[i].image.width);                    var newScaleX		= 512/currentWidth;                    fons[i].scaleX	= newScaleX;                    var currentHeight 	= parseInt(fons[i].image.height);                    var newScaleY		= 768/currentHeight;                    fons[i].scaleY = newScaleY;                    break;                case "noscale":                    //fons[i].regX	= 0.5;                    if(i == 0)                        fons[i].x 		= 0;// - (fons[i].image.width)/2;                    if(i == 1)                        fons[i].x 		= 512;// - (fons[i].image.width)/2;                    //fons[i].regY	= 0.5;                    fons[i].y 		= 0;// - (fons[i].image.height)/2;                    break;            }        }        segueixCarrega(folder,0,0);        (function(target) {            target.onPress = function(evt) {                if(endGame==false && baseGame.isGameActive()){                    if(differencesListen.checkPos(evt.stageX,evt.stageY)){                        dif = differencesListen.getDif();                        Tween.get(items1[dif]).to({alpha:1},400);                        Tween.get(items2[dif]).to({alpha:1},400);                        var itSound = xml.getEndGameSound();                        if(itSound != ""){                            PFSound.play('tick');                        }                        totals++;                    }                    if(totals==items1.length){                        endGame=true;                        baseGame.endGame(newXML.endGame);                    }                }            }        })(fons[i]);    }		//=======================================================================				// loadImatge: loads the differences in its right place	//=======================================================================	function loadImatge(evt){				i 			= evt.target.i;		num 		= evt.target.num;		orientation = evt.target.orientation;		factor 		= evt.target.factor;		desX 		= evt.target.desX;		desY 		= evt.target.desY;				var game 	= baseGame.getGame();		var folder 	= baseGame.getFolder();				var currentItem = eval('new Bitmap(images'+num+'['+i+'])');				if (newXML.items[i+3].getScale()!=1000){			var scaleFactor = xml.getItems(game)[(i+3)].getScale()/1000;			currentItem.scaleX = scaleFactor;			currentItem.scaleY = scaleFactor;		}		currentItem.defaultScaleX = currentItem.scaleX;		currentItem.defaultScaleY = currentItem.scaleY;		offsetx				= parseInt(currentItem.image.width)/2;		offsety				= parseInt(currentItem.image.height)/2;		newx				= parseInt(newXML.items[(i+3)].getX()) + desX;		newy				= parseInt(newXML.items[(i+3)].getY()) + desY;		currentItem.regX	= offsetx;		currentItem.regY	= offsety;		if(differencesOrientation == "horizontal"){			currentItem.x = newx;			currentItem.y = newy + 384 * factor;		}		if(differencesOrientation == "vertical"){			currentItem.x = newx + 512 * factor;			currentItem.y = newy;		}				baseGame.containerBase.addChild(currentItem);		currentItem.alpha=0.0;				if		(num == 1) items1[i] = currentItem;		else  if(num == 2) items2[i] = currentItem;				if(num==2 && (i+1)==items2.length){			differencesListen.guardaPosicions(items1,items2);		}	}   	//=====================================================	// CLEAR SOUNDS :	//=====================================================			this.onClearSounds = onClearSounds;    function onClearSounds(){		PFSound.unload('tick');                    }	}