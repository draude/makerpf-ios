//*************************************************************//	File: PFGameDragAllIn.js //	PFGameDragAllIn: game drag all in//*************************************************************function PFGameDragAllIn(){		//======================================================================				// VARIABLES	//======================================================================	var items;	var itemsPare;	var newXML;	var dragallinListen;	var images;	var imagesBox;	var imagesDrag;	var fiJoc	= false;	var sortir	= false;	var containerSup;	var containerPrincipal;	var containerNou;	var containerBase;	var total;	var num = 0;	var offsetx, offsety;	var newx, newy;	var i, j;	this.load = load;	this.show = show;		var baseGame;	var folder;	var direction;	var gameID;			//=======================================================================				// LOAD	//======================================================================	function load(game,folder){		folder = folder;		gameID = game;		newXML = new PFXMLDragContainers();		newXML.load(game,folder);				items 			= new Array(newXML.items.length);		itemsPare 		= new Array(newXML.itemsPare.length);		dragallinListen = new PFGameDragAllInListen();		PFSound.load('end','game/sounds/ok.mp3');		PFSound.load('tick','game/sounds/boto.mp3');		total = items.length - newXML.itemsDiscard;	}	//=======================================================================				// SHOW GAME	//======================================================================	function show(game,folder,direction,containerAux,containerAnt){		direction = direction;		baseGame = new PFBaseGame();		baseGame.create(this,game,folder,containerAux, containerAnt);			}		//=====================================================	// BUILD PRELOAD MANIFEST	//=====================================================	this.buildPreloadManifest = buildPreloadManifest	function buildPreloadManifest(itemsManifest,game){		for ( i=0; i<items.length; i++){			if(newXML.items[i].getSrc().charAt( newXML.items[i].getSrc().length-1 ) != "/"){				itemsManifest.push(newXML.items[i].getSrc());			}		}		itemsManifest.push(newXML.background.getSrc());		return itemsManifest;	}			//=====================================================	// ON ADD MENU	//=====================================================	this.onAddMenu = onAddMenu;	function onAddMenu(){}        //=====================================================	// ON SHOW GAME	//=====================================================	this.onShowGame = onShowGame;	function onShowGame(){		//var background = new Bitmap(newXML.background.getSrc());		//baseGame.containerBase.addChild(background);				imagesBox=new Array(itemsPare.length);        		for (i = 0; i < itemsPare.length; i++){			var imgSrc = newXML.itemsPare[i].getSrc();			if(imgSrc.charAt( imgSrc.length-1 ) != "/"){				imagesBox[i] 		= new Image();				imagesBox[i].src 	= imgSrc;				imagesBox[i].i 		= i;				imagesBox[i].onload = loadPare;			}else{				if(newXML.itemsPare[i].getKind() == 0 && newXML.itemsPare[i].getId() != "123456789") {					loadPareText(i);				}else{					loadChild(gameID,folder,direction);				}			}		}	}		//=======================================================================	// ON START GAME	//=======================================================================	this.onStartGame = onStartGame;	function onStartGame(){			}	//=====================================================	// loadText: load and show all child items images 	//=====================================================	function loadText(evt,direc){		i = evt;		direction 	= direc;		var game	= baseGame.getGame();		var folder 	= baseGame.getFolder();				var bm = new PFBaseItem(newXML.items[i],i);		items[i] = bm.getText();				var scaleFactor = 1;		if (newXML.items[i].getScale()!=1000){			scaleFactor = newXML.items[i].getScale()/1000;			items[i].scaleX	= scaleFactor;			items[i].scaleY	= scaleFactor;				}				items[i].defaultScaleX = items[i].scaleX;		items[i].defaultScaleY = items[i].scaleY;			items[i].i = i;					newx			= parseInt(newXML.items[i].getX());		newy			= parseInt(newXML.items[i].getY());		items[i].x 		= Math.floor((1024)*Math.random());		items[i].y 		= Math.floor((384)*Math.random() - 384);				items[i].rotation	=  newXML.items[i].getRotation();				baseGame.containerBase.addChild(items[i]);		Tween.get(items[i]).to({x:newx},300).play(Tween.get(items[i]).to({y:newy},300));					(function(target) {						target.onPress = function(evt) {				i = evt.target.i;				if(baseGame.isGameActive()){										if(dragallinListen.getItem() != i){						baseGame.containerBase.addChild(items[i]);												PFSound.play('tick');												dragallinListen.getPosition(target);						var offset = {x:target.x-evt.stageX, y:target.y-evt.stageY};						evt.onMouseMove = function(ev) {							dragallinListen.onMouseMove(ev,target,offset);						}													evt.onMouseUp = function(ev){														dragallinListen.onMouseUp(target,i,newXML.items[i].getParent(),newXML.itemsPare,items,itemsPare);														if(dragallinListen.getCorrect()){								total--;																var aftertotal = total;																Tween.get(baseGame.containerBase).wait(800).call(function(){checkChange(target,i,game,folder,aftertotal)});							}						}					}				}			}		})(items[i]);	}	//=====================================================	// loadBitmap: load and show all child items images 	//=====================================================	function loadBitmap(evt){		i = evt.target.i;		direction 	= evt.target.direction;		var game	= baseGame.getGame();		var folder 	= baseGame.getFolder();				items[i] = new Bitmap(imagesDrag[i]);		var scaleFactor = 1;		if (newXML.items[i].getScale()!=1000){			scaleFactor = newXML.items[i].getScale()/1000;			items[i].scaleX	= scaleFactor;			items[i].scaleY	= scaleFactor;				}				items[i].defaultScaleX = items[i].scaleX;		items[i].defaultScaleY = items[i].scaleY;			items[i].i = i;					offsetx			= (parseInt(items[i].image.width)/2);		offsety			= (parseInt(items[i].image.height)/2);		newx			= parseInt(newXML.items[i].getX());		newy			= parseInt(newXML.items[i].getY());		items[i].regX	= offsetx;		items[i].regY	= offsety;		items[i].x 		= Math.floor((1024)*Math.random());		items[i].y 		= Math.floor((384)*Math.random() - 384);				items[i].rotation	=  newXML.items[i].getRotation();				baseGame.containerBase.addChild(items[i]);		Tween.get(items[i]).to({x:newx},300).play(Tween.get(items[i]).to({y:newy},300));					(function(target) {						target.onPress = function(evt) {				i = evt.target.i;				if(baseGame.isGameActive()){										if(dragallinListen.getItem() != i){						baseGame.containerBase.addChild(items[i]);												PFSound.play('tick');												dragallinListen.getPosition(target);						var offset = {x:target.x-evt.stageX, y:target.y-evt.stageY};						evt.onMouseMove = function(ev) {							dragallinListen.onMouseMove(ev,target,offset);						}													evt.onMouseUp = function(ev){														dragallinListen.onMouseUp(target,i,newXML.items[i].getParent(),newXML.itemsPare,items,itemsPare);														if(dragallinListen.getCorrect()){								total--;																var aftertotal = total;																Tween.get(baseGame.containerBase).wait(800).call(function(){checkChange(target,i,game,folder,aftertotal)});							}						}					}				}			}		})(items[i]);	}		//=====================================================	// checkChange: remove correct bitmap and check end	//=====================================================	function checkChange(target,pos,game,folder,aftertotal){						if(aftertotal == 0){			baseGame.endGame(newXML.endGame);		}	}	//=====================================================	// loadPareText: load and show all parent items images 	//=====================================================	function loadPareText(evt){				if(i==itemsPare.length-1){			loadChild(gameID,folder,direction);		}		i = evt;				var bm = new PFBaseItem(newXML.itemsPare[i],i);		itemsPare[i] = bm.getText();					var scaleFactor = 1;				if (newXML.itemsPare[i].getScale()!=1000){			scaleFactor 	= newXML.itemsPare[i].getScale()/1000;			itemsPare[i].scaleX	= scaleFactor;			itemsPare[i].scaleY	= scaleFactor;					}			newx					= parseInt(newXML.itemsPare[i].getX());		newy					= parseInt(newXML.itemsPare[i].getY());		itemsPare[i].x			= newx;		itemsPare[i].y			= newy;		itemsPare[i].rotation	=  newXML.itemsPare[i].getRotation();		baseGame.containerBase.addChild(itemsPare[i]);		}	//=====================================================	// loadPare: load and show all parent items images 	//=====================================================	function loadPare(evt){		i = evt.target.i;		if(i==itemsPare.length-1){			loadChild(gameID,folder,direction);		}		i = evt.target.i;		itemsPare[i] = new Bitmap(imagesBox[i]);					var scaleFactor = 1;				if (newXML.itemsPare[i].getScale()!=1000){			scaleFactor 	= newXML.itemsPare[i].getScale()/1000;			itemsPare[i].scaleX	= scaleFactor;			itemsPare[i].scaleY	= scaleFactor;					}		offsetx					= (parseInt(itemsPare[i].image.width)/2);		offsety					= (parseInt(itemsPare[i].image.height)/2);		newx					= parseInt(newXML.itemsPare[i].getX());		newy					= parseInt(newXML.itemsPare[i].getY());		itemsPare[i].regX		= offsetx;		itemsPare[i].regY		= offsety;		itemsPare[i].x			= newx;		itemsPare[i].y			= newy;		itemsPare[i].rotation	=  newXML.itemsPare[i].getRotation();		baseGame.containerBase.addChild(itemsPare[i]);		}		function loadChild(game,folder,direction){		imagesDrag=new Array(items.length);		for (i = 0; i < items.length; i++){			if(newXML.items[i].getKind() == 1) {				imagesDrag[i]			= new Image();				imagesDrag[i].src 		= newXML.items[i].getSrc();				imagesDrag[i].i 		= i;				imagesDrag[i].direction = direction;				imagesDrag[i].onload 	= loadBitmap;			}else{				loadText(i,direction);			}		}	}	//=====================================================	// CLEAR SOUNDS :	//=====================================================	this.onClearSounds = onClearSounds;    function onClearSounds(){        for(i=0;i<items.length;i++){            PFSound.unload("sound"+i);        }    }}